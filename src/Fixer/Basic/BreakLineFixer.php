<?php

declare(strict_types=1);

/*
 * This file is part of PHP CS Fixer.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *     Dariusz Rumi≈Ñski <dariusz.ruminski@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace PhpCsFixer\Fixer\Basic;

use PhpCsFixer\AbstractFixer;
use PhpCsFixer\Fixer\ConfigurableFixerInterface;
use PhpCsFixer\Fixer\ConfigurableFixerTrait;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolver;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolverInterface;
use PhpCsFixer\FixerConfiguration\FixerOptionBuilder;
use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\Tokenizer\CT;
use PhpCsFixer\Tokenizer\Tokens;

/**
 * @phpstan-type _AutogeneratedInputConfiguration array{
 *      min_items: int,
 *      max_length: int,
 * }
 * @phpstan-type _AutogeneratedComputedConfiguration _AutogeneratedInputConfiguration
 */
final class BreakLineFixer extends AbstractFixer implements ConfigurableFixerInterface
{
    /** @use ConfigurableFixerTrait<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration> */
    use ConfigurableFixerTrait;

    public function getDefinition(): FixerDefinition
    {
        return new FixerDefinition(
            'Defines how multiline should be handled.',
            [
                // TODO: Update for each element. May be done during fixers split.
                new CodeSample(
                    <<<'PHP'
                    <?php

                    function foo(
                        Parameter $bar,
                        Parameter $thing,
                    ) {}
                    PHP,
                ),
                new CodeSample(
                    <<<'PHP'
                    <?php

                    foo(
                        $bar,
                        $thing,
                    );
                    PHP,
                ),
                new CodeSample(
                    <<<'PHP'
                    <?php

                    $foo = [
                        $bar,
                        $thing,
                    ];
                    PHP,
                ),
            ]
        );
    }

    public function isCandidate(Tokens $tokens): bool
    {
        return $tokens->isAnyTokenKindsFound([
            T_ARRAY,
            T_FUNCTION,
            T_NEW,
            T_ATTRIBUTE
        ]);
    }

    protected function createConfigurationDefinition(): FixerConfigurationResolverInterface
    {
        // TODO: Ensure at least one of `min_items` or `max_length` option is provided (meaning not null).
        return new FixerConfigurationResolver([
            (new FixerOptionBuilder('min_items', 'Minimum items count to break the line.'))
                ->setAllowedTypes(['int', 'null'])
                ->setDefault(null)
                ->getOption(),
            (new FixerOptionBuilder('max_length', 'Maximum line length before breaking the line.'))
                ->setAllowedTypes(['int', 'null'])
                ->setDefault(null)
                ->getOption(),
        ]);
    }

    protected function applyFix(\SplFileInfo $file, Tokens $tokens): void
    {
        foreach ($tokens as $index => $token) {
            if (!$token->isGivenKind([
                T_ARRAY,
                CT::T_ARRAY_SQUARE_BRACE_OPEN,
                // CT::T_ARRAY_INDEX_CURLY_BRACE_OPEN,
            ])) {
                continue;
            }

            $this->ensureFullyMultiline($tokens, $index);
        }
    }

    private function ensureFullyMultiline(Tokens $tokens, int $startIndex): void
    {
        if (!$tokens[$startIndex]->isGivenKind([CT::T_ARRAY_SQUARE_BRACE_OPEN, '('])) {
            $startIndex = $tokens->getNextTokenOfKind($startIndex, [CT::T_ARRAY_SQUARE_BRACE_OPEN, '(']);
        }

        $nextIndex = $startIndex;
        do {
            $nextIndex = $tokens->getNextMeaningfulToken($nextIndex);
            var_dump(
                $tokens[$nextIndex]->toArray(),
            );
        } while (!$tokens[$nextIndex]->isGivenKind([
            CT::T_ARRAY_SQUARE_BRACE_CLOSE,
            ')',
        ]));
    }

    private function ensureSingleline(Tokens $tokens, int $startIndex): void
    {
    }
}
